from tkcalendar import DateEntry
import turtle
import colorsys
import random
from tkinter import messagebox
from tkinter import*
import pymysql
from tkinter import ttk
import tkinter as tk

top1=Tk()
        
con = pymysql.connect(host="127.0.0.1", port=3307, user="root", passwd="harsh", database="icicibank")

cur=con.cursor()
def sc():
    try:
        screen = turtle.Screen()  
        t = turtle.Turtle()
        t.speed(-1)
        t.width(10)
        an = 0
        wq = 0
        for i in range(25):
            c = colorsys.hsv_to_rgb(wq, 1, 1)
            t.color(c)
            t.home()
            t.up()
            t.seth(an)
            t.fd(50)
            t.down()
            t.fd(10)
            t.up()
            an += -22.5
            wq += 0.02
            
        turtle.done()  
    except turtle.Terminator:
        print("Turtle graphics window was closed.") 
def add():
        
        w9=Toplevel()
        l1=Label(w9,text="ENTER NAME")
        l1.grid(row=1,column=1)
        l2=Label(w9,text="ENTER MOBILENO")
        l2.grid(row=2,column=1)
        l3=Label(w9,text="ENTER BRANCH")
        l3.grid(row=3,column=1)
        l4=Label(w9,text="ENTER DEPOSIT")
        l4.grid(row=4,column=1)
        l5=Label(w9,text="SET PASSWORD")
        l5.grid(row=5,column=1)
        l6=Label(w9,text="SECURITY QUESTIONS:")
        l6.grid(row=6,column=1)
        l7=Label(w9,text="HOBBY")
        l7.grid(row=7,column=1)
        
        l8=Label(w9,text="FAV BIKE")
        l8.grid(row=8,column=1)
        l9=Label(w9,text="FAV DES")
        l9.grid(row=9,column=1)
        l10=Label(w9,text="FAV SUBJ")
        l10.grid(row=10,column=1)
        e6=Entry(w9)
        e6.grid(row=7,column=2)
        e7=Entry(w9)
        e7.grid(row=8,column=2)
        e8=Entry(w9)
        e8.grid(row=9,column=2)
        e9=Entry(w9)
        e9.grid(row=10,column=2)
        e5=Entry(w9)
        e5.grid(row=5,column=2)
        e4=Entry(w9)
        e4.grid(row=4,column=2)
        e3=Entry(w9)
        e3.grid(row=3,column=2)
        e1=Entry(w9)
        e1.grid(row=1,column=2)
        e2=Entry(w9)
        e2.grid(row=2,column=2)
        def addacc():
            a=e1.get()
            b=e2.get()
            c=e3.get()
            d=e4.get()
            e=e5.get()
            f=e6.get()
            g10=e7.get()
            h1=e8.get()
            kl=e9.get()
            l=random.randrange(1,20000)
            cur.execute("insert into cust(accno,custname,mobno,branch,balance,hobby,bike,des,subj)values (%s,%s,%s,%s,%s,%s,%s,%s,%s)",(l,a,b,c,d,f,g10,h1,kl))
            con.commit()
            cur.execute("insert into login values(%s,%s)",(l,e,))  
            con.commit()  
            l4=Label(w9,text="YOUR ACCOUNT NUMBER IS")
            l4.grid(row=7,column=2)
            l5=Label(w9,text=l)
            l5.grid(row=7,column=3)
        b1=Button(w9,text="ADD",command=addacc)
        b1.grid(row=11,column=2)
def login():
    w5=Toplevel()
   
    l2=Label(w5,text="ENTER ACC NO",bg='#333333',fg="#FFFFFF",font=("Arial",14))
    l2.grid(row=1,column=1)
    e1=Entry(w5)
    e1.grid(row=1,column=2,pady=20)
    a=e1.get()
    l3=Label(w5,text="ENTER PASSWRD",bg='#333333',fg="#FFFFFF",font=("Arial",14))
    l3.grid(row=2,column=1)
    e2=Entry(w5)
    e2.grid(row=2,column=2,pady=20)
    

    def log():
        global a
        a=e1.get()
        b=e2.get()
        cur.execute("select * from login where accno=%s and psd=%s",(a,b))
        n=cur.fetchone()
        if n:
            l5=Label(top1,text="SUCCESS")
            l5.grid(row=4,column=2)
            w5.withdraw()
            top1.withdraw()
           
            top=Toplevel()
           

            def FD():
     
                w90=Toplevel()
            
                def show():
                    w90.withdraw()
                     
                    w89 = Toplevel()
                    w89.title("Fixed Deposits")
                    style = ttk.Style()
                    style.configure("Treeview.Heading", anchor="center")  
                    style.configure("Treeview", rowheight=25) 
                    style.configure("Treeview", font=('Arial', 12))  
                    style.configure("Treeview", background="white")                    
                    tree = ttk.Treeview(w89, columns=("FD No", "Amount", "Maturity Amount", "Start Date", "Maturity Date"), show="headings")
                            
                   
                    tree.heading("FD No", text="FD No", anchor="center")
                    tree.heading("Amount", text="Amount", anchor="center")
                    tree.heading("Maturity Amount", text="Maturity Amount", anchor="center")
                    tree.heading("Start Date", text="Start Date", anchor="center")
                    tree.heading("Maturity Date", text="Maturity Date", anchor="center")

                    tree.column("FD No", width=100, anchor="center")
                    tree.column("Amount", width=100, anchor="center")
                    tree.column("Maturity Amount", width=150, anchor="center")
                    tree.column("Start Date", width=120, anchor="center")
                    tree.column("Maturity Date", width=120, anchor="center")
                                           
                    tree.grid(row=1, column=1, sticky="nsew")
                    
                     
                    w89.grid_rowconfigure(1, weight=1)
                    w89.grid_columnconfigure(1, weight=1)
                    
                    
                    cur.execute("SELECT fdno, amount, mamount, fdate, mdate FROM fix WHERE accno = %s", (a,))
                    records = cur.fetchall()
                    if records:
                        
                        for record in records:
                            
                            tree.insert("", "end", values=record)
                    else:
                        tree.insert("", "end", values=("No records found", "", "", "", ""))
                    
                    w89.geometry("700x400")

                    
                def fix():
                       
                    global jj,gg,tt
                    jj = 0
                    gg = 0
                    tt = 0
                    
                    def fdcal():     
                        global jj,gg,tt
                        ab=e1.get()
                        abcs=int(ab)
                        jj=abcs+(abcs*7*1/100)
                        gg=abcs+(abcs*8*2/100)
                        tt=abcs+(abcs*9*3/100)
                    def calc():
                        fdcal()
                        try:
                            
                            l220=Label(w61,text="IF 12month:")
                            l220.grid(row=3,column=3)
                            l221=Label(w61,text=jj)
                            l221.grid(row=3,column=4)
                            l222=Label(w61,text="IF 24month:")
                            l222.grid(row=4,column=3)
                            l223=Label(w61,text=gg)
                            l223.grid(row=4,column=4)
                            l224=Label(w61,text="IF 36month:")
                            l224.grid(row=5,column=3)
                            l225=Label(w61,text=tt)
                            l225.grid(row=5,column=4)
                                     
                        except ValueError :
                            messagebox.showerror("Input Error", "Please enter a valid amount.")

                    w61=Toplevel()
                    l11=Label(w61,text="AMOUNT")
                    l11.grid(row=1,column=1)
                    e1=Entry(w61)
                    e1.grid(row=1,column=2)
                    def fd12():
                            try:
                                
                                    fdcal()
                                    ab=int(e1.get())
                                    confirm = messagebox.askyesno("Confirm","Do you want to proceed with 12 month FD at 7%?")
                                    
                                    if confirm:
                                            ra=random.randrange(1,40000)
                                            
                                            
                                            cur.execute("select balance from cust where accno=%s",(a))
                                            oi=cur.fetchone()
                                            oii=oi[0]
                                            oiii=float(oii)
                                            if oiii>=ab:
                                                    hj=oiii-ab
                                                    cur.execute("insert into fix (fdno,accno,amount,mamount, fdate, mdate) VALUES (%s,%s,%s,%s, NOW(), NOW() + INTERVAL 1 YEAR)", (ra,a,ab,jj,))
                                                    con.commit()
                                                    cur.execute("update cust set balance=%s where accno=%s",(hj,a))
                                                    con.commit()
                                                    cur.execute("insert into transa(accno,type,amount,newbal,tdate) values(%s,'FDCREATE',%s,%s,NOW())",(a,ab,hj,))
                                                    con.commit()  
                                                    l69=Label(w61,text="CREATED",font=("30"))
                                                    l69.grid(row=5,column=2)
                                                                                
                                            else:
                                                    messagebox.showerror("Insufficient Balance", "Not enough balance to create an FD.")
                                                    return
                            except Exception as e:
                                    messagebox.showerror("Database Error",str(e))

                    b12 = Button(w61, text="12 Month FD (7%)",command=fd12)
                    b12.grid(row=5, column=1)
                    def fd24():
                            try:
                                    fdcal()
                                    ab=int(e1.get())
                                    confirm = messagebox.askyesno("Confirm","Do you want to proceed with 24 month FD at 8%?")
                                    
                                    if confirm:
                                       
                                            ra=random.randrange(1,40000)
                                            
                                            cur.execute("select balance from cust where accno=%s",(a))
                                            oi=cur.fetchone()
                                            oii=oi[0]
                                            oiii=float(oii)
                                            if oiii>=ab:
                                                    cur.execute("insert into fix (fdno,accno,amount,mamount, fdate, mdate) VALUES (%s,%s,%s,%s, NOW(), NOW() + INTERVAL 2 YEAR)", (ra,a,ab,gg,))
                                                    con.commit()        
                                                    hj=oiii-ab
                                                    cur.execute("update cust set balance=%s where accno=%s",(hj,a))
                                                    con.commit()
                                                    cur.execute("insert into transa(accno,type,amount,newbal,tdate) values(%s,'FDCREATE',%s,%s,NOW())",(a,ab,hj,))
                                                    con.commit()
                                                    l69=Label(w61,text="CREATED",font=("30"))
                                                    l69.grid(row=5,column=2)
                                                
                                            else:
                                                    messagebox.showerror("Insufficient Balance", "Not enough balance to create an FD.")
                                                    return
                                                    
                            except Exception as e:
                                    messagebox.showerror("Database Error",str(e))

                    b24 = Button(w61, text="24 Month FD (8%)",command=fd24)
                    b24.grid(row=6, column=1)
                    def fd36():
                            try:
                                    fdcal()
                                    ab=int(e1.get())
                                    confirm = messagebox.askyesno("Confirm","Do you want to proceed with 36 month FD at 9%?")
                                    
                                    if confirm:
                                       
                                            ra=random.randrange(1,40000)
                                            
                                            cur.execute("select balance from cust where accno=%s",(a))
                                            oi=cur.fetchone()
                                            oii=oi[0]
                                            oiii=float(oii)
                                            if oiii>=ab:
                                                    hj=oiii-ab
                                                    cur.execute("update cust set balance=%s where accno=%s",(hj,a))
                                                    con.commit()
                                                    cur.execute("insert into fix (fdno,accno,amount,mamount, fdate, mdate) VALUES (%s,%s,%s,%s, NOW(), NOW() + INTERVAL 3 YEAR)", (ra,a,ab,tt,))
                                                    con.commit()
                                                    cur.execute("insert into transa(accno,type,amount,newbal,tdate) values(%s,'FDCREATE',%s,%s,NOW())",(a,ab,hj,))
                                                    con.commit()
                                                    l69=Label(w61,text="CREATED",font=("30"))
                                                    l69.grid(row=5,column=2)
                                            else:
                                                    messagebox.showerror("Insufficient Balance", "Not enough balance to create an FD.")
                                                    return
                            except Exception as e:
                                    messagebox.showerror("Database Error",str(e))
                    
                    b36 = Button(w61, text="36 Month FD (9%)",command=fd36)
                    b36.grid(row=7, column=1)

                    def fd36():
                            try:
                                    fdcal()
                                    ab=e1.get()
                                    confirm = messagebox.askyesno("Confirm","Do you want to proceed with 36 month FD at 9%?")
                                    
                                    if confirm:
                                       
                                            ra=random.randrange(1,40000)
                                            cur.execute("insert into fix (fdno,accno,amount,mamount, fdate, mdate) VALUES (%s,%s,%s,%s, NOW(), NOW() + INTERVAL 3 YEAR)", (ra,a,ab,tt,))
                                            con.commit()
                                            cur.execute("select balance from cust where accno=%s",(a))
                                            oi=cur.fetchone()
                                            oii=oi[0]
                                            oiii=float(oii)
                                            if oiii<ab:
                                                messagebox.showerror("Insufficient Balance", "Not enough balance to create an FD.")
                                                return
                                            hj=oiii-ab
                                            cur.execute("update cust set balance=%s where accno=%s",(hj,a))
                                            con.commit()
                                            l69=Label(w61,text="CREATED",font=("30"))
                                            l69.grid(row=5,column=2)
                            except Exception as e:
                                    messagebox.showerror("Database Error",str(e))
                    
                    
                    b_calculate = Button(w61, text="Calculate", command=calc)
                    b_calculate.grid(row=3, column=1, columnspan=2)
                          
                def bre():
                    
                    w09=Toplevel()
                    l09=Label(w09,text="Enter FD number")
                    l09.grid(row=1,column=1)
                    e09=Entry(w09)
                    e09.grid(row=1,column=2)
                    l099 = Label(w09, text="NO RECORDS FOUND")

                    def brea():
                        kgf=e09.get()
                        k=StringVar()
                        cur.execute("select * from fix where fdno=%s and accno=%s",(kgf,a))
                        kgf1=cur.fetchall()
                        
                        if kgf1:
                            
                            cur.execute("select amount from fix where fdno=%s",(kgf,))
                            sage=cur.fetchone()
                            messagebox.showinfo("IMPORTANT","If you break before the maturation Date,a 5% penalty will be deducted")
                           
                            w07=Toplevel()
                            def ge():
                                w07.withdraw()
                                global je
                                g1=n1.get()
                                if g1==1:
                                    sage1=sage[0]
                                    je=sage1*0.05
                                    newje=sage1-je
                                    cur.execute("delete from fix where fdno=%s",(kgf))
                                    con.commit()
                                    l099.grid_forget()
                                    
                                    l099['text']="DONE"
                                    l099['font'] = ("Arial", 15)
                                    l099.grid(row=4, column=2)
                
                                    l710=Label(w09,text=f"YOUR FD AMOUNT OF :{newje}will be added",font=("30"))
                                    l710.grid(row=5,column=1)
                                    cur.execute("select balance from cust where accno=%s",(a,))
                                    gf=cur.fetchone()
                                    gf1=gf[0]
                                    mn=gf1+int(newje)
                                    cur.execute("update cust set balance=%s where accno=%s",(mn,a))
                                    cur.execute("insert into transa(accno,type,amount,newbal,tdate) values(%s,'FDBREAK',%s,%s,NOW())",(a,newje,mn,))
                                    con.commit()
                                else:
                                    messagebox.askretrycancel("ERROR","YOU HAVE TO AGREE")
                            
                            n1=IntVar()
                            pch=Checkbutton(w07,text=f"I agree to penalty deduction of ",onvalue=1,offvalue=0,variable=n1)
                            pch.grid(row=3,column=2)
                            b99=Button(w07,text="OK",command=ge)
                            b99.grid(row=4,column=2)
                                    
                            
                        else:
                            l099.grid(row=4, column=2)

                    b09=Button(w09,text="BREAK YOUR FD",command=brea)
                    b09.grid(row=3,column=2)
                    
                def fix1():
                    w90.withdraw()
                    w900=Toplevel()
                    b1000=Button(w900,text="CREATE A NEW",command=fix)
                    b1000.grid(row=1,column=1)
                    
                    b1001=Button(w900,text="BREAK A FD",command=bre)
                    b1001.grid(row=2,column=1)                             
  
                b90=Button(w90,text="FIXED DEPOSIT",command=fix1)
                b90.grid(row=1,column=1)

                
                b91=Button(w90,text="EXISTING INVESTMENTS",command=show)
                b91.grid(row=1,column=3)
            def dep():
                ab=e1.get()
                w2=Toplevel()
                cur.execute("select balance from cust where accno=%s",(ab,))
                n=cur.fetchone()
                l2=Label(w2,text="YOUR BALANCE IS")
                l2.grid(row=3,column=1)
                l3=Label(w2,text=n)
                l3.grid(row=3,column=2)
                l5=Label(w2,text="ENTER AMOUNT TO DEPOSIT")
                l5.grid(row=4,column=1)
                e5=Entry(w2)
                e5.grid(row=4,column=2)
                def deposit():
                        sc()        
                        n1=n[0]
                        h=e5.get()
                        nb=n1+int(h)
                        
                        cur.execute("update cust set balance=%s where accno=%s",(nb,ab))
                        con.commit()
                        cur.execute("insert into transa(accno,type,amount,newbal,tdate) values(%s,'DEPOSIT',%s,%s,NOW())",(ab,h,nb,))
                        con.commit()        
                        
                        l10=Label(w2,text="NEW BALANCE")
                        l10.grid(row=6,column=2)
                        l11=Label(w2,text=nb)
                        l11.grid(row=6,column=3)
                        
                        
                b5=Button(w2,text="ADD AMOUNT",command=deposit)
                b5.grid(row=5,column=2)

                w2.geometry("500x500")

            def wit():
                    w3=Toplevel()
                    abc=e1.get()
                    cur.execute("select balance from cust where accno=%s",(abc,))
                    n=cur.fetchone()
                    l2=Label(w3,text="YOUR BALANCE IS")
                    l2.grid(row=3,column=1)
                    l3=Label(w3,text=n)
                    l3.grid(row=3,column=2)
                    l5=Label(w3,text="ENTER AMOUNT TO WITHDRAW")
                    l5.grid(row=4,column=1)
                    e5=Entry(w3)
                    e5.grid(row=4,column=2)
                    def wit():
                        
                        n1=n[0]
                        h=e5.get()
                        if n1>int(h):
                                sc()
                                nb=n1-int(h)
                                cur.execute("update cust set balance=%s where accno=%s",(nb,abc))
                                con.commit()
                                cur.execute("insert into transa(accno,type,amount,newbal,tdate) values(%s,'WITHDRAWL',%s,%s,NOW())",(abc,h,nb,))
                                con.commit()
                                
                                l10=Label(w3,text="NEW BALANCE")
                                l10.grid(row=6,column=2)
                                l11=Label(w3,text=nb)
                                l11.grid(row=6,column=3)
                                
                        else:
                            l13=Label(w3,text="INSUFFICIENT BALANCE")
                            l13.grid(row=5,column=2)
                    b5=Button(w3,text="WITHDRAW AMOUNT",command=wit)
                    b5.grid(row=7,column=2)
               
                    w3.geometry("500x500")
            def view():
                    abc=e1.get()
                    w4=Toplevel()
                    cur.execute("select balance from cust where accno=%s",(abc,))
                    n=cur.fetchone()
                    l2=Label(w4,text="YOUR BALANCE IS")
                    l2.grid(row=3,column=1)
                    l3=Label(w4,text=n)
                    l3.grid(row=3,column=2)
                    w4.geometry("500x500")
            def sta():
                    p35=Toplevel()
                    def alll():
                            p35.withdraw()
                            w91=Toplevel()
                            style = ttk.Style()
                            style.configure("Treeview.Heading", anchor="center") 
                            style.configure("Treeview", rowheight=25)  
                            style.configure("Treeview", font=('Arial', 12)) 
                            style.configure("Treeview", background="white")                   
                            tree = ttk.Treeview(w91, columns=("accno","Type", "Amount","rembal","Tdate"), show="headings")
                                    
                           
                            tree.heading("accno", text="accno", anchor="center")
                            
                            tree.heading("Type", text="Type", anchor="center")
            
                            tree.heading("Amount", text="Amount", anchor="center")
                            tree.heading("rembal",text="rembal",anchor="center")
                            tree.heading("Tdate", text="Tdate", anchor="center")

                            tree.column("accno", width=100, anchor="center")
                            tree.column("Type", width=100, anchor="center")
                            tree.column("Amount", width=150, anchor="center")
                            tree.column("rembal", width=120, anchor="center")
                            tree.column("Tdate", width=120, anchor="center")
                                                   
                            tree.grid(row=1, column=1, sticky="nsew")
                            
                             
                            w91.grid_rowconfigure(1, weight=1)
                            w91.grid_columnconfigure(1, weight=1)
                            
                            
                            cur.execute("select * from transa where accno = %s", (a,))
                            records = cur.fetchall()
                            if records:
                                
                                for record in records:
                                        
                                    tree.insert("", "end", values=record)
                            else:
                                tree.insert("", "end", values=("No records found", "", "", "", ""))
                            
                            w91.geometry("700x400")
                    def custo():
                            
                            p35.withdraw()
                            w92 = tk.Toplevel()
                            w92.title("Custom Date Range")

                            yi = tk.Label(w92, text="Start Date (YYYY-MM-DD):")
                            yi.grid(row=1, column=1)
                            st = DateEntry(w92, date_pattern='yyyy-mm-dd')
                            st.grid(row=1, column=2)
                            
                            ni = tk.Label(w92, text="End Date (YYYY-MM-DD):")
                            ni.grid(row=2, column=1)
                            edate = DateEntry(w92, date_pattern='yyyy-mm-dd')
                            edate.grid(row=2, column=2)

                            def custom():
                                    start = st.get_date()
                                    end = edate.get_date()

                                    if start > end:
                                            messagebox.showerror("Invalid Date Range", "Start Date must be before End Date.")
                                            return

                                
                                    w93 = tk.Toplevel()
                                    w93.title("Transaction Records")
                                    style = ttk.Style()
                                    style.configure("Treeview.Heading", anchor="center") 
                                    style.configure("Treeview", rowheight=25)
                                    style.configure("Treeview", font=('Arial', 12))
                                    style.configure("Treeview", background="white")

                                    tree = ttk.Treeview(w93, columns=("accno", "Type", "Amount", "rembal", "Tdate"), show="headings")
                                    tree.heading("accno", text="Account Number", anchor="center")
                                    tree.heading("Type", text="Type", anchor="center")
                                    tree.heading("Amount", text="Amount", anchor="center")
                                    tree.heading("rembal", text="Remaining Balance", anchor="center")
                                    tree.heading("Tdate", text="Transaction Date", anchor="center")

                                    tree.column("accno", width=120, anchor="center")
                                    tree.column("Type", width=100, anchor="center")
                                    tree.column("Amount", width=150, anchor="center")
                                    tree.column("rembal", width=150, anchor="center")
                                    tree.column("Tdate", width=130, anchor="center")

                                    tree.grid(row=1, column=1, sticky="nsew")
 
                                    w93.grid_rowconfigure(1, weight=1)
                                    w93.grid_columnconfigure(1, weight=1)
   
                                    try:
                                            
                                            cur.execute("select * from transa where accno = %s and Tdate between %s and %s", (a, start, end))
                                            records = cur.fetchall()
                                            if records:
                                                    for record in records:
                                                            
                                                            tree.insert("", "end", values=record)
                                            else:
                                                    tree.insert("", "end", values=("No records found", "", "", "", ""))
                                    except Exception as e:
                                            messagebox.showerror("Database Error", f"An error occurred: {e}")
                                               
                                            w93.destroy()
                                            return    

    
                            g10 = tk.Button(w92, text="Show Transactions", command=custom, font=('Arial', 12))
                            g10.grid(row=3, column=1, columnspan=2, pady=10)
                    
                    b1=Button(p35,text="ALL",command=alll)
                    b1.grid(row=1,column=1)
                    b2=Button(p35,text="CUSTOM",command=custo)
                    b2.grid(row=1,column=2)
                    
                    b3=Button(p35,text="LAST10")
                    b3.grid(row=1,column=3)
            
            def upi():
                    w55=Toplevel()
                    def updnu():
                        w55.withdraw()
                        s=Toplevel()
                        bu1=Label(s,text="ENTER NEW NUMBER")
                        bu1.grid(row=1,column=1)
                        eu1=Entry(s)
                        eu1.grid(row=1,column=2)
                        def updnu2():
                            confirm1=messagebox.askyesno("CONFIRM","YOU SURE?")
                            if confirm1:
                                jk=eu1.get()
                                cur.execute("update cust set mobno=%s where accno=%s",(jk,a))
                                con.commit()
                                l01=Label(s,text="SUCCESS")
                                l01.grid(row=4,column=2)
                        bu2=Button(s,text="UPDATE",command=updnu2)
                        bu2.grid(row=2,column=2)
                    b1=Button(w55,text="UPDATE NUMBER",command=updnu)
                    b1.grid(row=1,column=1)
                    def upds():
                        w55.withdraw()
                        w79=Toplevel()
                        label=Label(w79,text="ANSWER EXISTING SEC QUES")
                        label.grid(row=1,column=2)
                        l7=Label(w79,text="HOBBY")
                        l7.grid(row=2,column=1)
                        l8=Label(w79,text="FAV BIKE")
                        l8.grid(row=3,column=1)
                        l9=Label(w79,text="FAV DES")
                        l9.grid(row=4,column=1)
                        l10=Label(w79,text="FAV SUBJ")
                        l10.grid(row=5,column=1)
                        e6=Entry(w79)
                        e6.grid(row=2,column=2)
                        e7=Entry(w79)
                        e7.grid(row=3,column=2)
                        e8=Entry(w79)
                        e8.grid(row=4,column=2)
                        e9=Entry(w79)
                        e9.grid(row=5,column=2)
                        l809=None
                        def psget1():
                            nonlocal l809
                            virat1=e6.get()
                            dhoni1=e7.get()
                            thala1=e8.get()
                            rohit1=e9.get()
                            cur.execute("select * from cust where hobby=%s and bike=%s and des=%s and subj=%s",(virat1,dhoni1,thala1,rohit1,))
                            bumrah1=cur.fetchall()
                            if bumrah1:
                                w79.withdraw()
                                w96 = Toplevel()
                                l6 = Label(w96, text="SELECT SECURITY QUESTION TO UPDATE:")
                                l6.grid(row=1, column=1)
                                security_questions = ["HOBBY", "FAV BIKE", "FAV DES", "FAV SUBJ"]
                                selected_question = StringVar(value=security_questions[0])  # Default selection

                                dropdown = ttk.Combobox(w96, textvariable=selected_question, values=security_questions)
                                dropdown.grid(row=1, column=2)

                                new_answer_label = Label(w96, text="Enter New Answer:")
                                new_answer_label.grid(row=2, column=1)

                                new_answer_entry = Entry(w96)
                                new_answer_entry.grid(row=2, column=2)

                                def update_security_question():
                                    selected_value = selected_question.get()
                                    new_answer = new_answer_entry.get()
                                    question_column_map = {
                                        "HOBBY": "hobby",
                                        "FAV BIKE": "bike",
                                        "FAV DES": "des",
                                        "FAV SUBJ": "subj"
                                    }

                                    if selected_value in question_column_map:
                                        cur.execute(f"UPDATE cust SET {question_column_map[selected_value]}=%s WHERE accno=%s", (new_answer, a))
                                        con.commit()
                                        l00 = Label(w96, text="Update Successful")
                                        l00.grid(row=4, column=2)
                                    else:
                                        messagebox.showerror("Error", "Invalid selection.")

                                update_button = Button(w96, text="UPDATE", command=update_security_question)
                                update_button.grid(row=3, column=2)

                                w96.geometry("400x200")
                            else:
                                messagebox.showerror("ERROR","INVALID")
                        b099=Button(w79,text="CONTINUE",command=psget1)
                        b099.grid(row=7,column=2)
                        
                        
                    b2=Button(w55,text="UPDATE SECURITY QUE",command=upds)
                    b2.grid(row=1,column=2)
                    w55.geometry("400x400")
            b2=Button(top,text="DEPOSIT",command=dep)
            b2.grid(row=2,column=2)
            b3=Button(top,text="WITHDRAWL",command=wit)
            b3.grid(row=2,column=3)
            b4=Button(top,text="VIEW BALANCE",command=view)
            b4.grid(row=2,column=4)
            b5=Button(top,text="INVEST",command=FD)
            b5.grid(row=2,column=5)
            b6=Button(top,text="BANKSTATMENT",command=sta)
            b6.grid(row=2,column=7)
            b7=Button(top,text="UPDATE DETAILS",command=upi)
            b7.grid(row=2,column=8)
            top.geometry("600x500")
            def transfer1():
                    w22=Toplevel()
                    l1=Label(w22, text="ENTER BUDDY ACC NO")
                    l1.grid(row=1,column=1)
                    e10=Entry(w22)
                    e10.grid(row=1,column=2)

                    l10=Label(w22, text="ENTER AMOUNt")
                    l10.grid(row=2,column=1)
                    e111=Entry(w22)
                    e111.grid(row=2,column=2)
                    def che():
                           
                            z=e10.get()
                            cur.execute("select balance from cust where accno=%s",(a,))
                            p=cur.fetchone()
                            cur.execute("select balance from cust where accno=%s",(z,))
                            ll=cur.fetchone()
                            if p:
                                   
                                    kj=int(e111.get())
                                    p1=p[0]
                                    lll=ll[0]
                            if p1>int(kj):
                                    
                                    
                                    nbb=p1-kj
                                    nb1=lll+kj
                                    cur.execute("update cust set balance=%s where accno=%s",(nbb, a))
                                    con.commit()
                       
                                    cur.execute("update cust set balance=%s where accno=%s",(nb1, z))
                                    con.commit()
                                    cur.execute("insert into transa(accno,type,amount,newbal,tdate) values(%s,'RECI',%s,%s,NOW())",(a,kj,nbb,))
                                    con.commit()
                                    cur.execute("insert into transa(accno,type,amount,newbal,tdate) values(%s,'TRANSF',%s,%s,NOW())",(z,kj,nb1,))
                                    con.commit()
                                    screen.bye()      
                                    l60=Label(w22,text="SUCCESS")
                                    l60.grid(row=7,column=2)
                           
                            else:
                                    l13=Label(w22,text="NO ACC EXISTS")
                                    l13.grid(row=5,column=2)
                   
                    b222=Button(w22,text="TRANSFER",command=che)
                    b222.grid(row=3,column=2)    
            b6=Button(top,text="TRANSFER",command=transfer1)
            b6.grid(row=2,column=6)
            
        else:
                l09=Label(w5,text="INVALID DETS",bg='#333333',fg="#FFFFFF",font=("Arial",12))
                l09.grid(row=5,column=2,columnspan=2)
                def pas():
                    d10=Toplevel()
                    l6=Label(d10,text="SECURITY QUESTIONS:")
                    l6.grid(row=1,column=1)
                    l7=Label(d10,text="HOBBY")
                    l7.grid(row=2,column=1)
                    l8=Label(d10,text="FAV BIKE")
                    l8.grid(row=3,column=1)
                    l9=Label(d10,text="FAV DES")
                    l9.grid(row=4,column=1)
                    l10=Label(d10,text="FAV SUBJ")
                    l10.grid(row=5,column=1)
                    e6=Entry(d10)
                    e6.grid(row=2,column=2)
                    e7=Entry(d10)
                    e7.grid(row=3,column=2)
                    e8=Entry(d10)
                    e8.grid(row=4,column=2)
                    e9=Entry(d10)
                    e9.grid(row=5,column=2)
                    l809=None
                    def psget():
                            nonlocal l809
                            virat=e6.get()
                            dhoni=e7.get()
                            thala=e8.get()
                            rohit=e9.get()
                            cur.execute("select * from cust where hobby=%s and bike=%s and des=%s and subj=%s",(virat,dhoni,thala,rohit,))
                            bumrah=cur.fetchall()
                            
                            if not bumrah:
                                    l809=Label(d10,text="INCORRECT")
                                    l809.grid(row=8,column=2) 
                            else:
                                    def exps():
                                            l809.grid_forget()
                                            cur.execute("select psd from login where accno=%s",(a,))
                                            fb=cur.fetchone()
                                            l808=Label(d10,text="YOUR PASSWORD IS:")
                                            l808.grid(row=7,column=1)
                                            l908=Label(d10,text=fb)
                                            l908.grid(row=7,column=2)
                                    bp=Button(d10,text="EXISTINGPSWRD",command=exps)
                                    bp.grid(row=6,column=2)
                                    def res():
                                            d10.withdraw()
                                            d100=Toplevel()
                                            l69=Label(d100,text="Enter NEw password")
                                            l69.grid(row=1,column=1)
                                            l70=Label(d100,text="Confirm password")
                                            l70.grid(row=2,column=1)
                                            e90=Entry(d100)
                                            e90.grid(row=1,column=2)
                                            e91=Entry(d100,show="*")
                                            e91.grid(row=2,column=2)
                                            def reset():
                                                    
                                                    salman=e90.get()
                                                    aamir=e91.get()
                                                    if salman==aamir:
                                                            cur.execute("update login set psd=%s where accno=%s ",(aamir,a))
                                                            con.commit()
                                                            l550=Label(d100,text="DONE")
                                                            l550.grid(row=5,column=2)
                                                    else:
                                                            messagebox.showerror("ERROR","DOESNT MATCH")
                                            b600=Button(d100,text="RESET",command=reset)
                                            b600.grid(row=4,column=2)
                                    b108=Button(d10,text="RESET",command=res)
                                    b108.grid(row=6,column=3)
                            
                    
                    b105=Button(d10,text="GETPSWRD",command=psget)
                    b105.grid(row=6,column=2)
                    
                b69=Button(w5,text="FORGOTPAS",command=pas)
                b69.grid(row=6,column=2)
    b1=Button(w5,text="LOGIN",command=log,bg="#FF3399",fg="#FFFFFF",font=("Arial",16))
    b1.grid(row=3,column=2,columnspan=3)
    w5.geometry("400x300")
    w5.configure(bg='#333333')
def tran():
    w10=Toplevel()
   
    l1=Label(w10,text="ENTER Account No")
    l1.grid(row=1,column=1)
    e11=Entry(w10)
    e11.grid(row=1,column=2)
    l3=Label(w10,text="Enter pswrd")
    l3.grid(row=2,column=1)
    e33=Entry(w10)
    e33.grid(row=2,column=2)
   
    def transfer():
        h=e11.get()
        j=e33.get()
        cur.execute("select * from login where accno=%s and psd=%s",(h,j))
        n=cur.fetchone()
        if n:
            w22=Toplevel()
            l1=Label(w22, text="ENTER BUDDY ACC NO")
            l1.grid(row=1,column=1)
            e10=Entry(w22)
            e10.grid(row=1,column=2)

            l10=Label(w22, text="ENTER AMOUNt")
            l10.grid(row=2,column=1)
            e111=Entry(w22)
            e111.grid(row=2,column=2)
            def che():
                z=e10.get()
                cur.execute("select balance from cust where accno=%s",(h,))
                p=cur.fetchone()
                cur.execute("select balance from cust where accno=%s",(z,))
                ll=cur.fetchone()
                if p:
                    kj=int(e111.get())
                    p1=p[0]
                    lll=ll[0]
                    if p1>int(kj):
                        nbb=p1-kj
                        nb1=lll+kj
                        cur.execute("update cust set balance=%s where accno=%s",(nbb, h))
                        con.commit()
                       
                        cur.execute("update cust set balance=%s where accno=%s",(nb1, z))
                        con.commit()
                        cur.execute("insert into transa(accno,type,amount,newbal,tdate) values(%s,'TRANSF',%s,%s,NOW())",(h,kj,nbb,))
                        con.commit()
                        cur.execute("insert into transa(accno,type,amount,newbal,tdate) values(%s,'TRANREC',%s,%s,NOW())",(z,kj,nb1,))
                        con.commit()
                        l60=Label(w22,text="SUCCESS")
                        l60.grid(row=7,column=2)
                           
                else:
                    l13=Label(w22,text="NO ACC EXISTS")
                    l13.grid(row=5,column=2)
                   
            b222=Button(w22,text="TRANSFER",command=che)
            b222.grid(row=3,column=2)
           
            def bal():
                cur.execute("select balance from cust where accno=%s",(h,))
                x=cur.fetchone()
                l2=Label(w22,text="YOUR BALANCE IS")
                l2.grid(row=4,column=4)
                l3=Label(w22,text=x)
                l3.grid(row=4,column=5)
            b11=Button(w22,text="CHECK BAL",command=bal)
            b11.grid(row=3,column=4)

                   
    b1=Button(w10,text="ENTER",command=transfer)
    b1.grid(row=4,column=2)    
l1=Label(top1,text="WELCOME TO ICICI BANK",font="29")
l1.grid(row=1,column=4)
b1=Button(top1,text="LOGIN",command=login)
b1.grid(row=2,column=3)
b2=Button(top1,text="ADDACCOUNT",command=add)
b2.grid(row=2,column=4)
b5=Button(top1,text="TRANSFER MONEY",command=tran)
b5.grid(row=2,column=6)
top1.geometry("600x400")
con.close
